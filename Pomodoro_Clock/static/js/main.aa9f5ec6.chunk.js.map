{"version":3,"sources":["components/TimeSetter.js","components/Break.js","components/Session.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","height","background","TimeSetter","props","classes","conf","text","size","minute","second","prevTime","value","ref","useRef","useEffect","current","usePrevious","useState","PMinute","setPMinute","PSecond","setPSecond","intervalID","timer","setTimer","handlePause","length","clearInterval","pop","console","log","currentPSecond","currentPMinute","Grid","item","xs","Paper","className","Typography","variant","slice","Icon","style","fontSize","cursor","onClick","id","setInterval","push","onClickRefresh","breakSession","onClickIncrement","onClickDecrement","App","_break","_session","_main","setMinute","setSecond","setBreakSession","Container","maxWidth","align","container","Break","currentBreakSession","Session","currentMinute","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.aa9f5ec6.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {Grid, Paper, Typography, Icon } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: '#fff',\r\n    height: 200,\r\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\r\n\r\n  },\r\n}));\r\n\r\nconst usePrevious = (value) => {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref.current;\r\n}\r\n\r\nconst TimeSetter = (props) => {\r\n\r\n  const classes = useStyles();\r\n  const  {text, size} = props.conf;\r\n  let {minute, second} = props\r\n  const prevTime = usePrevious({minute, second});\r\n\r\n  const [PMinute, setPMinute] = useState(minute)\r\n  const [PSecond, setPSecond] = useState(second)\r\n  const [timer, setTimer] = useState({\r\n    intervalID: [],\r\n  })\r\n\r\n  const handlePause = () => {\r\n    while(timer.intervalID.length){\r\n      clearInterval(timer.intervalID.pop() )\r\n    }\r\n  }\r\n\r\n  const handlePlay = () => {\r\n    handlePause() // clearing the intervals first\r\n    let intervalID = []\r\n\r\n    let id = setInterval( () => {\r\n      setPSecond(currentPSecond => currentPSecond === 0 ? currentPSecond = 59 : currentPSecond - 1)\r\n    }, 100)\r\n    intervalID.push(id)\r\n\r\n    id = setInterval( () => {\r\n      setPMinute(currentPMinute => currentPMinute === 0 ? currentPMinute = 59 : currentPMinute - 1)\r\n    }, 1000)\r\n    intervalID.push(id)\r\n\r\n    setTimer({intervalID})\r\n  }\r\n\r\n  useEffect(() => {\r\n    // refresh isn't working\r\n    if(prevTime){\r\n      if(prevTime.minute < minute){\r\n        console.log(prevTime.minute)\r\n        setPSecond(currentPSecond => 0 )\r\n        setPMinute(currentPMinute => prevTime.minute + 1 )\r\n      }\r\n      else if(prevTime.minute > minute){\r\n        setPSecond(currentPSecond => 0 )\r\n        setPMinute(currentPMinute => prevTime.minute - 1 )\r\n      }\r\n    }\r\n\r\n\r\n  });\r\n\r\n  return (\r\n    <Grid item xs={size} >\r\n      <Paper className={classes.paper}>{text}\r\n        {/* { timer.intervalID.length > 0 ? (\r\n            <Typography variant=\"h1\" > {PMinute}:{('0' + PSecond).slice(-2)}</Typography>\r\n          ) : ( */}\r\n            <Typography variant=\"h1\" > {PMinute}:{('0' + PSecond).slice(-2)}</Typography>\r\n          {/* )\r\n        } */}\r\n\r\n        <Icon style={{ fontSize: 50, cursor: 'pointer' }} onClick={handlePause}>pause</Icon>\r\n        <Icon style={{ fontSize: 50, cursor: 'pointer'}} onClick={handlePlay}>play_arrow</Icon>\r\n        <Icon style={{ fontSize: 50, cursor: 'pointer'}} onClick={props.onClickRefresh}>refresh</Icon>\r\n\r\n      </Paper>\r\n    </Grid>\r\n  );\r\n\r\n}\r\n\r\nexport default TimeSetter;\r\n","import React, {useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {Grid, Paper, Typography, Icon } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: '#000070',\r\n    height: 200,\r\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\r\n\r\n  },\r\n}));\r\n\r\n\r\nconst TimeSetter = (props) => {\r\n  const classes = useStyles();\r\n  const  {text, size} = props.conf;\r\n\r\n\r\n  return (\r\n    <Grid item xs={size} >\r\n      <Paper className={classes.paper}>{text}\r\n        <Typography variant=\"h1\" > {props.breakSession} </Typography>\r\n\r\n        <Icon style={{ fontSize: 50, cursor: 'pointer' }} onClick={props.onClickIncrement}>expand_less</Icon>\r\n        <Icon style={{ fontSize: 50, cursor: 'pointer'}} onClick={props.onClickDecrement}>expand_more</Icon>\r\n\r\n      </Paper>\r\n    </Grid>\r\n  );\r\n\r\n}\r\n\r\nexport default TimeSetter;\r\n","import React, {useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {Grid, Paper, Typography, Icon } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: '#000070',\r\n    height: 200,\r\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\r\n  },\r\n}));\r\n\r\n\r\nconst TimeSetter = (props) => {\r\n  const classes = useStyles();\r\n  const  {text, size} = props.conf;\r\n\r\n  return (\r\n    <Grid item xs={size} >\r\n      <Paper className={classes.paper}>{text}\r\n        <Typography variant=\"h1\" > {props.minute} </Typography>\r\n\r\n        <Icon style={{ fontSize: 50, cursor: 'pointer' }} onClick={props.onClickIncrement}>expand_less</Icon>\r\n        <Icon style={{ fontSize: 50, cursor: 'pointer'}} onClick={props.onClickDecrement}>expand_more</Icon>\r\n\r\n      </Paper>\r\n    </Grid>\r\n  );\r\n\r\n}\r\n\r\nexport default TimeSetter;\r\n","import React, {useState} from 'react';\nimport {Container, Grid, Typography} from '@material-ui/core';\nimport TimeSetter from './components/TimeSetter';\nimport Break from './components/Break';\nimport Session from './components/Session';\n\nconst App = () => {\n  const _data = {\n    'break' : {\n      'text': 'Break Length',\n      'size': 6\n    },\n    'session': {\n      'text': 'Session Length',\n      'size': 6\n    },\n    'main':{\n      'text': 'Pomodoro Session',\n      'size': 12\n    }\n  }\n  const _break = _data.break;\n  const _session = _data.session;\n  const _main = _data.main;\n\n  const [minute, setMinute] = useState(25);\n  const [second, setSecond] = useState(0);\n  const [breakSession, setBreakSession] = useState(5);\n\n  const handleIncrement = () => {\n    setMinute(currentMinute => currentMinute < 60 ? currentMinute + 1 : currentMinute)\n    setSecond(0)\n  }\n  const handleDecrement = () => {\n    setMinute(currentMinute => currentMinute > 1 ? currentMinute - 1 : currentMinute)\n    setSecond(0)\n  }\n\n  const handleBreakIncrement = () => {\n    setBreakSession(currentBreakSession => currentBreakSession < 60 ? currentBreakSession + 1 : currentBreakSession)\n  }\n  const handleBreakDecrement = () => {\n    setBreakSession(currentBreakSession => currentBreakSession > 1 ? currentBreakSession - 1 : currentBreakSession)\n  }\n\n  const handleRefresh = () => {\n    setMinute(25)\n    setBreakSession(5)\n\n  }\n\n  return (\n    <div>\n      <Container maxWidth=\"md\">\n        <Typography variant=\"h2\" align=\"center\"> Pomodoro Clock </Typography>\n      {/* <Grid container spacing={3} align=\"center\" direction=\"column\" justify=\"center\"> */}\n        <Grid container spacing={3}>\n          <Break conf={_break} breakSession={breakSession} onClickIncrement={handleBreakIncrement} onClickDecrement={handleBreakDecrement}/>\n          <Session conf={_session} minute={minute} onClickIncrement={handleIncrement} onClickDecrement={handleDecrement}/>\n        </Grid>\n\n        <Grid container spacing={3}>\n          <TimeSetter conf={_main} minute={minute} second={second} onClickRefresh={handleRefresh}/>\n        </Grid>\n      {/* </Grid> */}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}