{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","generateQuote","chosenQuote","quotes","state","apiResult","randomNumber","Math","floor","random","length","forEach","element","index","push","setState","text","quote","author","changeColor","color","i","clickCount","bgColor","shareOnTwitter","concat","window","open","encodeURIComponent","isLoaded","handleClick","bind","assertThisInitialized","_this2","fetch","headers","Accept","then","response","json","responseData","quotesArrayLength","catch","error","react_default","a","createElement","id","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ce9fd788.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      apiResult: null,\r\n      author: '',\r\n      text: '',\r\n      isLoaded: false,\r\n      bgColor: '#f99192',\r\n      clickCount: 0,\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.shareOnTwitter = this.shareOnTwitter.bind(this);\r\n  }\r\n\r\n  handleClick() {\r\n    this.generateQuote();\r\n    this.changeColor();\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json', {\r\n      headers: {\r\n        Accept: \"application/json\",\r\n      }\r\n    })\r\n    .then(response => response.json())\r\n    .then((responseData) => {\r\n      this.setState({\r\n        apiResult: responseData.quotes,\r\n        isLoaded: true,\r\n        author: responseData.quotes[0].author,\r\n        text: responseData.quotes[0].quote,\r\n        quotesArrayLength: responseData.quotes.length,\r\n      });\r\n    })\r\n    .catch(error => this.setState({ error }));\r\n  }\r\n\r\n  generateQuote = () => {\r\n    const chosenQuote = [];\r\n    const quotes = this.state.apiResult;\r\n    let randomNumber = Math.floor((Math.random() * this.state.apiResult.length) + 1);\r\n\r\n    quotes.forEach(function(element, index) {\r\n      if(index === randomNumber) {\r\n        chosenQuote.push(element)\r\n      }\r\n    })\r\n    this.setState({\r\n      text:chosenQuote[0].quote,\r\n      author:chosenQuote[0].author,\r\n    })\r\n  }\r\n\r\n  changeColor = () => {\r\n    const color = ['#385a7c', '#f97171', '#f99192', '#8ad6cc', '#BDBB99'];\r\n    let i = this.state.clickCount;\r\n\r\n    this.setState({\r\n      clickCount: this.state.clickCount+1,\r\n    });\r\n\r\n    if(i<4) {\r\n      this.setState({\r\n        bgColor: color[i],\r\n      });\r\n    } else if(i>=4) {\r\n      this.setState({\r\n        bgColor: color[i],\r\n        clickCount: 0,\r\n      });\r\n    } else if (i===0) {\r\n      this.setState({\r\n        clickCount: this.state.clickCount+1,\r\n        bgColor: color[i],\r\n      });\r\n    }\r\n  }\r\n\r\n  shareOnTwitter = () => {\r\n    // found on https://gist.github.com/McKinneyDigital/2884508#file-share-twitter-js\r\n    var url = \"twitter.com\";\r\n    let text = `${this.state.author} - ${this.state.text}`\r\n    window.open('http://twitter.com/share?url='+encodeURIComponent(url)+'&text='+encodeURIComponent(text), '', 'left=0,top=0,width=550,height=450,personalbar=0,toolbar=0,scrollbars=0,resizable=0');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"main\">\r\n      <style>\r\n          {`\r\n          :root {\r\n            --main-bg-color: ${this.state.bgColor};\r\n            --main-txt-color: ${this.state.bgColor};\r\n            }\r\n          `}\r\n        </style>\r\n        <h1 id=\"title\">Random Quote Machine</h1>\r\n        <div id=\"quote-box\">\r\n          <p id=\"text\">{this.state.text}</p>\r\n          <p id=\"author\"> - {this.state.author}</p>\r\n          <button id=\"tweet-quote\" onClick={this.shareOnTwitter}>Twitter</button>\r\n          <button id=\"new-quote\" onClick={this.handleClick}>New Quote</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}